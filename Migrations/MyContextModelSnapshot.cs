// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWebsite;

namespace project.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyWebsite.AnalysisLogModel", b =>
                {
                    b.Property<Guid>("A_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnalysisTime")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("B_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("NvarChar(Max)");

                    b.Property<string>("M_Id")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("A_Id");

                    b.HasIndex("B_Id");

                    b.HasIndex("M_Id");

                    b.ToTable("AnalysisLog");

                    b.HasData(
                        new
                        {
                            A_Id = new Guid("a963eccd-97aa-42ce-ae27-6b85c4fa3ad6"),
                            AnalysisTime = new DateTime(2020, 7, 21, 22, 6, 39, 861, DateTimeKind.Local).AddTicks(5791),
                            B_Id = new Guid("2f98319c-1039-4177-9556-bace55da0cb5"),
                            Image = "https://i.imgur.com/PuC21Ma.png",
                            M_Id = "1"
                        });
                });

            modelBuilder.Entity("MyWebsite.AnalysisStatusModel", b =>
                {
                    b.Property<int>("AS_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("A_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("S_Id")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("AS_Id");

                    b.HasIndex("A_Id");

                    b.HasIndex("S_Id");

                    b.ToTable("AnalysisStatus");

                    b.HasData(
                        new
                        {
                            AS_Id = 1,
                            A_Id = new Guid("520c4a33-3dda-443f-a8be-f80c6ba01090"),
                            S_Id = "1"
                        });
                });

            modelBuilder.Entity("MyWebsite.BeforeAnalysisLogModel", b =>
                {
                    b.Property<Guid>("B_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawImage")
                        .HasColumnType("NvarChar(Max)");

                    b.Property<DateTime>("RawTime")
                        .HasColumnType("DateTime");

                    b.HasKey("B_Id");

                    b.ToTable("BeforeAnalysisLog");

                    b.HasData(
                        new
                        {
                            B_Id = new Guid("ac0f9021-299c-463c-89db-db8e35375756"),
                            RawImage = "https://i.imgur.com/cfeJ9j7.png",
                            RawTime = new DateTime(2020, 7, 21, 22, 6, 39, 864, DateTimeKind.Local).AddTicks(1463)
                        });
                });

            modelBuilder.Entity("MyWebsite.StatusModel", b =>
                {
                    b.Property<string>("S_Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Message")
                        .HasColumnType("Nvarchar(200)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarChar(36)");

                    b.HasKey("S_Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            S_Id = "1",
                            Message = "坐姿過於前傾",
                            StatusName = "坐姿警示"
                        });
                });

            modelBuilder.Entity("MyWebsite.UserModel", b =>
                {
                    b.Property<string>("M_Id")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Passsword")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Role")
                        .HasColumnType("bit");

                    b.HasKey("M_Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            M_Id = "1",
                            CreateTime = new DateTime(2020, 7, 21, 22, 6, 39, 850, DateTimeKind.Local).AddTicks(2896),
                            Email = "ok96305@gmail.com",
                            Name = "陳建成",
                            Passsword = "12345",
                            Role = true
                        });
                });

            modelBuilder.Entity("MyWebsite.AnalysisLogModel", b =>
                {
                    b.HasOne("MyWebsite.BeforeAnalysisLogModel", "TheBeforeAnalysisLogModel")
                        .WithMany("AnalysisLog")
                        .HasForeignKey("B_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebsite.UserModel", "TheUser")
                        .WithMany("AnalysisLog")
                        .HasForeignKey("M_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebsite.AnalysisStatusModel", b =>
                {
                    b.HasOne("MyWebsite.AnalysisLogModel", "TheAnalysisLog")
                        .WithMany("AnalysisStatus")
                        .HasForeignKey("A_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebsite.StatusModel", "TheStatus")
                        .WithMany("AnalysisStatus")
                        .HasForeignKey("S_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
